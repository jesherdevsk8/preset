#!/usr/bin/env bash
# -----------------------------------------------------------------
# Script      : post-install
# Description : My post instalation
# Version     : 0.1
# Autor       : Jesher Minelli <jesherdevsk8@gmail.com>
# Date        : dom 9 out 2022
# License     : GNU/GPL v3.0
# -----------------------------------------------------------------
# Usage: ./post-install
# -----------------------------------------------------------------

#-------------------------- VARIABLES -----------------------------
NON_ROOT_USER="$(who | awk '{print $1}')"
BASHRC="$HOME/.bashrc"
PPAs=(
  "ppa:agornostal/ulauncher"
  "ppa:ansible/ansible"
)
FLATHUB="https://flathub.org/repo/flathub.flatpakrepo"
DOWNLOAD_PROGRAMS_DIR="/tmp/deb_programs"
DEB_PROGRAMS=(
  https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
  https://dl.discordapp.net/apps/linux/0.0.25/discord-0.0.25.deb
  https://dbeaver.io/files/dbeaver-ce_latest_amd64.deb
)

PACKAGES=(
  apt-transport-https
  software-properties-common
  build-essential
  vim
  bat
  htop
  jq
  wget
  curl
  git
  tmux
  flatpak
  virtualbox
  guake
  openssh-server
  neofetch
  libssl-dev
  mariadb-server
  postgresql
  postgresql-contrib
  binutils
  cowsay
  gparted
  peek
  cmatrix
  zsh
  fish
  flameshot
  debootstrap
  shellcheck
)

FLATPAK_PACKAGES=(
  org.gnome.gitlab.somas.Apostrophe
  com.github.sdv43.whaler
  com.getpostman.Postman
  com.spotify.Client
  org.telegram.desktop
)

# functions for colorized output
# ANSI escape color codes
readonly ansiRed='\e[1;31m'
readonly ansiGreen='\e[1;32m'
readonly ansiYellow='\e[1;33m'
readonly ansiBlue='\e[1;36m'
readonly ansiNoColor='\e[0m'

echoRed() {
  echo -e "${ansiRed}$*${ansiNoColor}"
}

echoGreen() {
  echo -e "${ansiGreen}$*${ansiNoColor}"
}

echoYellow() {
  echo -e "${ansiYellow}$*${ansiNoColor}"
}

echoBlue() {
  echo -e "${ansiBlue}$*${ansiNoColor}"
}

err() {
  echoRed "$*" >&2
}

warn() {
  echoYellow "$*" >&2
}

info() {
  echoBlue "$*" >&2
}

#--------------------------- FUNCTIONS -----------------------------
# helper functions
installPkg() {
  sudo apt-get update && sudo apt-get install -y "$@"
}

flatpakInstall() {
  sudo flatpak remote-add --if-not-exists flathub "$FLATHUB"
  sudo flatpak install -y --noninteractive flathub "$@"
}

# returns success if "$1" is installed
isInstalled() {
  local command="$1"
  command -v "${command}" || return 1
  warn "Skipping: '${command}' seems to be already installed."
}

# returns dpkg success if "$1" is installed
dpkgInstalled() {
  local command="$1"
  dpkg -l | grep -q "${command}" || return 1
  warn "Skipping: '${command}' seems to be already installed."
}

# add ppa to repository
addPpa() {
  sudo add-apt-repository "$@" -y &> /dev/null
}

getGithubLatestVersion() {
  local repo="$1"
  local regexUserSlashRepo='^[^/]+/[^/]+$'

  if [[ ! "${repo}" =~ $regexUserSlashRepo ]]; then
    err "ERROR: invalid argument '${repo}'"
    echo "Usage: ${FUNCNAME[0]} user/repo" >&2
    return 1
  fi

  curl \
    --silent \
    --location \
    "https://api.github.com/repos/${repo}/releases/latest" \
    | jq -e --raw-output '.tag_name'
}

# functions to install software
installVSCode() {
  isInstalled code && return
  echoGreen "\n--> installing Visual Studio Code..."

  # https://code.visualstudio.com/docs/setup/linux#_debian-and-ubuntu-based-distributions
  wget -qO- https://packages.microsoft.com/keys/microsoft.asc \
    | gpg --dearmor > packages.microsoft.gpg
  sudo install -D -o root -g root -m 644 packages.microsoft.gpg /etc/apt/keyrings/packages.microsoft.gpg
  rm -f packages.microsoft.gpg

  echo \
    "deb [arch=${ARCHITECTURE} signed-by=/etc/apt/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main" \
    | sudo tee /etc/apt/sources.list.d/vscode.list > /dev/null

  installPkg apt-transport-https
  installPkg code
}

installSublimeText() {
  isInstalled subl && return
  echoGreen "\n--> installing Sublime-text..."

  # https://www.sublimetext.com/docs/linux_repositories.html#apt
  wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | gpg --dearmor \
    | sudo tee /etc/apt/trusted.gpg.d/sublimehq-archive.gpg > /dev/null

  echo "deb https://download.sublimetext.com/ apt/stable/" \
    | sudo tee /etc/apt/sources.list.d/sublime-text.list

  installPkg sublime-text
}

installDocker() {
  isInstalled docker && return
  echoGreen "\n--> installing docker..."

  # https://docs.docker.com/engine/install/ubuntu/#install-using-the-repository
  installPkg ca-certificates curl gnupg lsb-release

  # sudo mkdir -m 0755 -p /etc/apt/keyrings
  curl -fsSL https://download.docker.com/linux/ubuntu/gpg \
    | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg

  echo \
    "deb [arch=${ARCHITECTURE} signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
    ${UBUNTU_CODENAME} stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

  installPkg docker-ce docker-ce-cli containerd.io

  sudo usermod -a -G docker "${NON_ROOT_USER}"
}

installVagrant() {
  isInstalled vagrant && return
  echoGreen "\n--> installing Vagrant..."

  # https://developer.hashicorp.com/vagrant/downloads
  wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor \
    | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg

  echo \
    "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com \
    ${UBUNTU_CODENAME} main" | sudo tee /etc/apt/sources.list.d/hashicorp.list &> /dev/null

  installPkg vagrant
}

installRvm() {
  isInstalled rvm && return
  echoGreen "\n--> installing RVM..."

  https://rvm.io/rvm/install
  gpg --keyserver keyserver.ubuntu.com --recv-keys \
    409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB
  
  curl -sSL https://get.rvm.io | bash

  echo '# Add RVM to PATH for scripting. Make sure this is the last PATH variable change.' >> "${BASHRC}"
  echo 'export PATH=$HOME/.rvm/bin:$PATH' >> "${BASHRC}"
  echo '[[ -f $HOME/.rvm/scripts/rvm ]] && source $HOME/.rvm/scripts/rvm' >> "${BASHRC}"
}

# install asdf
installAsdf() {  
  echoGreen "\n--> installing asdf version manager..."

  local asdfDir="${HOME}/.asdf"
  local latestVersion

  if [[ -d "${HOME}/.asdf/" ]]; then
    warn "WARNING: '${asdfDir}': directory exists but you don't have 'asdf' in you PATH.\nCheck instructions: https://asdf-vm.com/guide/getting-started.html"
  fi

  mkdir -p "${asdfDir}"

  latestVersion="$(getGithubLatestVersion asdf-vm/asdf)"

  git clone https://github.com/asdf-vm/asdf.git "${asdfDir}" --branch "${latestVersion}"
  echo 'source "$HOME/.asdf/asdf.sh"' >> "${BASHRC}"
  echo 'source "$HOME/.asdf/completions/asdf.bash"' >> "${BASHRC}"

  # add plugins ruby and nodejs
  # asdf plugin add ruby https://github.com/asdf-vm/asdf-ruby.git
  # asdf plugin add nodejs https://github.com/asdf-vm/asdf-nodejs.git
}

# installing ansible using ubuntu ppa
installPPA() {
  for ppa in "${PPAs[@]}"; do
    isInstalled "${ppa##*/}" && return
    echoGreen "\n--> installing ${ppa}"
    addPpa "${ppa}"
    installPkg "${ppa##*/}"
  done
}

installDebPkg() {
  mkdir -p "${DOWNLOAD_PROGRAMS_DIR}"

  local information=$( sed ':a;$!N;s/ /\n/;s/-/_/;ta;' <<< "${DEB_PROGRAMS[@]##*/}" )
  printf '%s\n' 'packages:'
  info "${information}"

  for url in "${DEB_PROGRAMS[@]}"; do
    wget -c "${url}" -P "${DOWNLOAD_PROGRAMS_DIR}" &> /dev/null

    local debPkg="${DOWNLOAD_PROGRAMS_DIR}/${url##*/}"
    local url_extraida=$( sed 's/-/_/g' <<< "${url##*/}" | cut -d _ -f 1 )
    
    dpkgInstalled ${url_extraida}
    echoGreen "\n--> installing .deb packages..."
    installPkg "$debPkg"
  done
}

#---------------------------- MAIN ---------------------------------

main() {
  cd "${HOME}" || return 1

  export ARCHITECTURE="$(dpkg --print-architecture)"

  # get the ubuntu codename
  source /etc/os-release
  if [[ -z "${UBUNTU_CODENAME}" ]]; then
    warn "WARNING: failed to detect UBUNTU_CODENAME while installing docker. Skipping..."
  fi
  export UBUNTU_CODENAME

  installPkg "${PACKAGES[@]}"
  flatpakInstall "${FLATPAK_PACKAGES[@]}"

  # My Dev tools
  installPPA
  installVSCode
  installSublimeText
  installDocker
  installAsdf
  # installRvm
  installVagrant
  installDebPkg
}

[[ "$0" == "${BASH_SOURCE[0]}" ]] && main "$@"